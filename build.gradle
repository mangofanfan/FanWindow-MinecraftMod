plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

apply from: "versions.gradle"

version = project.mod_version
group = project.maven_group

// 动态配置版本相关属性
if (project.hasProperty('target_version')) {
    ext.config = versionConfigs[target_version]
    if (config == null) {
        throw new GradleException("Unsupported Minecraft version: ${target_version}") as Throwable
    }

    // 设置各属性
    project.ext.yarn_mappings = config.yarn_mappings
    project.ext.cloth_config_api_version = config.cloth_config_api_version
    project.ext.modmenu_version = config.modmenu_version
    project.ext.versioned_scr = config.versioned_scr
    project.ext.publish_minecraft_version = config.publish_minecraft_version
    project.ext.mod_sign = config.mod_sign
}

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "fanwindow" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    accessWidenerPath = file("src/client/resources/fanwindow.accesswidener")

    runs {
        client {
            property("fabric.gameVersion", target_version)
        }
    }
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

sourceSets {
    client {
        java {
            // 动态引入版本适配代码
            srcDir "src/versioned/${versioned_scr}/client/java"
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        url = "https://maven.shedaniel.me/"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.target_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

    modApi "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_api_version}"
}

processResources {
    inputs.property "version", owner.version
    inputs.property "loader_version", owner.loader_version
    inputs.property "cloth_config_api_version", owner.cloth_config_api_version
    inputs.property "modmenu_version", owner.modmenu_version
    inputs.property "publish_minecraft_version", owner.publish_minecraft_version
    filteringCharset = "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version,
                "publish_minecraft_version": publish_minecraft_version,
                "loader_version": loader_version,
                "cloth_config_api_version": cloth_config_api_version,
                "modmenu_version": modmenu_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    archiveBaseName = "fanwindow"
    archiveVersion = "${project.version}-${project.mod_sign}"
}

sourcesJar {
    archiveBaseName = "fanwindow"
    archiveVersion = "${project.version}-${project.mod_sign}"
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

remapJar {
    archiveBaseName = jar.archiveBaseName
    archiveVersion = jar.archiveVersion
}

remapSourcesJar {
    archiveBaseName = sourcesJar.archiveBaseName
    archiveVersion = sourcesJar.archiveVersion
    archiveClassifier = sourcesJar.archiveClassifier
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

// ========== 添加多版本构建任务 ==========
task buildAllVersions {
    group 'build'
    description 'Builds the mod for all supported Minecraft versions'

    doLast {
        def versions = ["1.21", "1.21.2", "1.21.4", "1.21.5"]
        def total = versions.size()
        def current = 1

        versions.each { version ->
            logger.lifecycle("\n>>> [${current}/${total}] Building for Minecraft ${version}")
            exec {
                workingDir projectDir
                commandLine = ["gradle.bat", "build", "-Ptarget_version=${version}", "--stacktrace"]
            }
            current++
        }
    }
}
